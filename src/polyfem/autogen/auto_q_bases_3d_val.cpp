#include "auto_q_bases_3d_val.hpp"


namespace polyfem {
namespace autogen {
namespace {
void q_0_basis_value_3d(const int local_index, const Eigen::MatrixXd &uv, Eigen::MatrixXd &result_0){

auto x=uv.col(0).array();
auto y=uv.col(1).array();
auto z=uv.col(2).array();

result_0.resize(x.size(),1);
switch(local_index){
	case 0: {result_0.setOnes();} break;
	default: assert(false);
}}
void q_1_basis_value_3d(const int local_index, const Eigen::MatrixXd &uv, Eigen::MatrixXd &result_0){

auto x=uv.col(0).array();
auto y=uv.col(1).array();
auto z=uv.col(2).array();

switch(local_index){
	case 0: {result_0 = -1.0*(x - 1)*(y - 1)*(z - 1);} break;
	case 1: {result_0 = 1.0*x*(y - 1)*(z - 1);} break;
	case 2: {result_0 = -1.0*x*y*(z - 1);} break;
	case 3: {result_0 = 1.0*y*(x - 1)*(z - 1);} break;
	case 4: {result_0 = 1.0*z*(x - 1)*(y - 1);} break;
	case 5: {result_0 = -1.0*x*z*(y - 1);} break;
	case 6: {result_0 = 1.0*x*y*z;} break;
	case 7: {result_0 = -1.0*y*z*(x - 1);} break;
	default: assert(false);
}}
void q_2_basis_value_3d(const int local_index, const Eigen::MatrixXd &uv, Eigen::MatrixXd &result_0){

auto x=uv.col(0).array();
auto y=uv.col(1).array();
auto z=uv.col(2).array();

switch(local_index){
	case 0: {result_0 = 1.0*(x - 1)*(2.0*x - 1.0)*(y - 1)*(2.0*y - 1.0)*(z - 1)*(2.0*z - 1.0);} break;
	case 1: {result_0 = 1.0*x*(2.0*x - 1.0)*(y - 1)*(2.0*y - 1.0)*(z - 1)*(2.0*z - 1.0);} break;
	case 2: {result_0 = 1.0*x*y*(2.0*x - 1.0)*(2.0*y - 1.0)*(z - 1)*(2.0*z - 1.0);} break;
	case 3: {result_0 = 1.0*y*(x - 1)*(2.0*x - 1.0)*(2.0*y - 1.0)*(z - 1)*(2.0*z - 1.0);} break;
	case 4: {result_0 = 1.0*z*(x - 1)*(2.0*x - 1.0)*(y - 1)*(2.0*y - 1.0)*(2.0*z - 1.0);} break;
	case 5: {result_0 = 1.0*x*z*(2.0*x - 1.0)*(y - 1)*(2.0*y - 1.0)*(2.0*z - 1.0);} break;
	case 6: {result_0 = 1.0*x*y*z*(2.0*x - 1.0)*(2.0*y - 1.0)*(2.0*z - 1.0);} break;
	case 7: {result_0 = 1.0*y*z*(x - 1)*(2.0*x - 1.0)*(2.0*y - 1.0)*(2.0*z - 1.0);} break;
	case 8: {result_0 = -4.0*x*(x - 1)*(y - 1)*(2.0*y - 1.0)*(z - 1)*(2.0*z - 1.0);} break;
	case 9: {result_0 = -4.0*x*y*(2.0*x - 1.0)*(y - 1)*(z - 1)*(2.0*z - 1.0);} break;
	case 10: {result_0 = -4.0*x*y*(x - 1)*(2.0*y - 1.0)*(z - 1)*(2.0*z - 1.0);} break;
	case 11: {result_0 = -4.0*y*(x - 1)*(2.0*x - 1.0)*(y - 1)*(z - 1)*(2.0*z - 1.0);} break;
	case 12: {result_0 = -4.0*z*(x - 1)*(2.0*x - 1.0)*(y - 1)*(2.0*y - 1.0)*(z - 1);} break;
	case 13: {result_0 = -4.0*x*z*(2.0*x - 1.0)*(y - 1)*(2.0*y - 1.0)*(z - 1);} break;
	case 14: {result_0 = -4.0*x*y*z*(2.0*x - 1.0)*(2.0*y - 1.0)*(z - 1);} break;
	case 15: {result_0 = -4.0*y*z*(x - 1)*(2.0*x - 1.0)*(2.0*y - 1.0)*(z - 1);} break;
	case 16: {result_0 = -4.0*x*z*(x - 1)*(y - 1)*(2.0*y - 1.0)*(2.0*z - 1.0);} break;
	case 17: {result_0 = -4.0*x*y*z*(2.0*x - 1.0)*(y - 1)*(2.0*z - 1.0);} break;
	case 18: {result_0 = -4.0*x*y*z*(x - 1)*(2.0*y - 1.0)*(2.0*z - 1.0);} break;
	case 19: {result_0 = -4.0*y*z*(x - 1)*(2.0*x - 1.0)*(y - 1)*(2.0*z - 1.0);} break;
	case 20: {result_0 = 16.0*y*z*(x - 1)*(2.0*x - 1.0)*(y - 1)*(z - 1);} break;
	case 21: {result_0 = 16.0*x*y*z*(2.0*x - 1.0)*(y - 1)*(z - 1);} break;
	case 22: {result_0 = 16.0*x*z*(x - 1)*(y - 1)*(2.0*y - 1.0)*(z - 1);} break;
	case 23: {result_0 = 16.0*x*y*z*(x - 1)*(2.0*y - 1.0)*(z - 1);} break;
	case 24: {result_0 = 16.0*x*y*(x - 1)*(y - 1)*(z - 1)*(2.0*z - 1.0);} break;
	case 25: {result_0 = 16.0*x*y*z*(x - 1)*(y - 1)*(2.0*z - 1.0);} break;
	case 26: {result_0 = -64.0*x*y*z*(x - 1)*(y - 1)*(z - 1);} break;
	default: assert(false);
}}
void q_3_basis_value_3d(const int local_index, const Eigen::MatrixXd &uv, Eigen::MatrixXd &result_0){

auto x=uv.col(0).array();
auto y=uv.col(1).array();
auto z=uv.col(2).array();

switch(local_index){
	case 0: {result_0 = -1.0*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 1: {result_0 = 1.0*x*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 2: {result_0 = -1.0*x*y*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 3: {result_0 = 1.0*y*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 4: {result_0 = 1.0*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 5: {result_0 = -1.0*x*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 6: {result_0 = 1.0*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 7: {result_0 = -1.0*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 8: {result_0 = 4.4999999999999991*x*(x - 1)*(3.0*x - 2.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 9: {result_0 = -4.4999999999999991*x*(x - 1)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 10: {result_0 = -4.4999999999999991*x*y*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 11: {result_0 = 4.4999999999999991*x*y*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 12: {result_0 = 4.4999999999999991*x*y*(x - 1)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 13: {result_0 = -4.4999999999999991*x*y*(x - 1)*(3.0*x - 2.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 14: {result_0 = -4.4999999999999991*y*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 15: {result_0 = 4.4999999999999991*y*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 16: {result_0 = 4.4999999999999991*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 17: {result_0 = -4.4999999999999991*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 18: {result_0 = 4.4999999999999991*x*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 19: {result_0 = -4.4999999999999991*x*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 20: {result_0 = -4.4999999999999991*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 1.0);} break;
	case 21: {result_0 = 4.4999999999999991*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 2.0);} break;
	case 22: {result_0 = 4.4999999999999991*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 1.0);} break;
	case 23: {result_0 = -4.4999999999999991*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 2.0);} break;
	case 24: {result_0 = -4.4999999999999991*x*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 25: {result_0 = 4.4999999999999991*x*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 26: {result_0 = 4.4999999999999991*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 2.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 27: {result_0 = -4.4999999999999991*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 28: {result_0 = -4.4999999999999991*x*y*z*(x - 1)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 29: {result_0 = 4.4999999999999991*x*y*z*(x - 1)*(3.0*x - 2.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 30: {result_0 = 4.4999999999999991*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 31: {result_0 = -4.4999999999999991*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 32: {result_0 = -20.249999999999993*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 33: {result_0 = 20.249999999999993*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 34: {result_0 = 20.249999999999993*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 35: {result_0 = -20.249999999999993*y*z*(x - 1)*(1.5*x - 1.0)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 36: {result_0 = 20.249999999999993*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 37: {result_0 = -20.249999999999993*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 38: {result_0 = -20.249999999999993*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 39: {result_0 = 20.249999999999993*x*y*z*(1.4999999999999998*x - 0.49999999999999989)*(2.9999999999999996*x - 1.9999999999999996)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 40: {result_0 = -20.249999999999993*x*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 41: {result_0 = 20.249999999999993*x*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 42: {result_0 = 20.249999999999993*x*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 43: {result_0 = -20.249999999999993*x*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(1.5*y - 1.0)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 44: {result_0 = 20.249999999999993*x*y*z*(x - 1)*(3.0*x - 2.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 2.0);} break;
	case 45: {result_0 = -20.249999999999993*x*y*z*(x - 1)*(3.0*x - 2.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 1.0);} break;
	case 46: {result_0 = -20.249999999999993*x*y*z*(x - 1)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 2.0);} break;
	case 47: {result_0 = 20.249999999999993*x*y*z*(x - 1)*(3.0*x - 1.0)*(1.4999999999999998*y - 0.49999999999999989)*(2.9999999999999996*y - 1.9999999999999996)*(z - 1)*(3.0*z - 1.0);} break;
	case 48: {result_0 = -20.249999999999993*x*y*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 49: {result_0 = 20.249999999999993*x*y*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 50: {result_0 = 20.249999999999993*x*y*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 51: {result_0 = -20.249999999999993*x*y*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(1.5*z - 1.0)*(3.0*z - 1.0);} break;
	case 52: {result_0 = 20.249999999999993*x*y*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 2.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 53: {result_0 = -20.249999999999993*x*y*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 54: {result_0 = -20.249999999999993*x*y*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 55: {result_0 = 20.249999999999993*x*y*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(1.4999999999999998*z - 0.49999999999999989)*(2.9999999999999996*z - 1.9999999999999996);} break;
	case 56: {result_0 = 91.124999999999957*x*y*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 57: {result_0 = -91.124999999999957*x*y*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 58: {result_0 = -91.124999999999957*x*y*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 59: {result_0 = 91.124999999999957*x*y*z*(x - 1)*(3.0*x - 2.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 60: {result_0 = -91.124999999999957*x*y*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 61: {result_0 = 91.124999999999957*x*y*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 2.0)*(z - 1)*(3.0*z - 1.0);} break;
	case 62: {result_0 = 91.124999999999957*x*y*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 2.0);} break;
	case 63: {result_0 = -91.124999999999957*x*y*z*(x - 1)*(3.0*x - 1.0)*(y - 1)*(3.0*y - 1.0)*(z - 1)*(3.0*z - 1.0);} break;
	default: assert(false);
}}
void q_m2_basis_value_3d(const int local_index, const Eigen::MatrixXd &uv, Eigen::MatrixXd &result_0){

auto x=uv.col(0).array();
auto y=uv.col(1).array();
auto z=uv.col(2).array();

switch(local_index){
	case 0: {result_0 = 1.0*(x - 1)*(y - 1)*(z - 1)*(2*x + 2*y + 2*z - 1);} break;
	case 1: {result_0 = -1.0*x*(y - 1)*(z - 1)*(-2*x + 2*y + 2*z + 1);} break;
	case 2: {result_0 = -1.0*x*y*(z - 1)*(2*x + 2*y - 2*z - 3);} break;
	case 3: {result_0 = -1.0*y*(x - 1)*(z - 1)*(2*x - 2*y + 2*z + 1);} break;
	case 4: {result_0 = -1.0*z*(x - 1)*(y - 1)*(2*x + 2*y - 2*z + 1);} break;
	case 5: {result_0 = -1.0*x*z*(y - 1)*(2*x - 2*y + 2*z - 3);} break;
	case 6: {result_0 = x*y*z*(2.0*x + 2.0*y + 2.0*z - 5.0);} break;
	case 7: {result_0 = 1.0*y*z*(x - 1)*(2*x - 2*y - 2*z + 3);} break;
	case 8: {result_0 = -4*x*(x - 1)*(y - 1)*(z - 1);} break;
	case 9: {result_0 = 4*x*y*(y - 1)*(z - 1);} break;
	case 10: {result_0 = 4*x*y*(x - 1)*(z - 1);} break;
	case 11: {result_0 = -4*y*(x - 1)*(y - 1)*(z - 1);} break;
	case 12: {result_0 = -4*z*(x - 1)*(y - 1)*(z - 1);} break;
	case 13: {result_0 = 4*x*z*(y - 1)*(z - 1);} break;
	case 14: {result_0 = -4*x*y*z*(z - 1);} break;
	case 15: {result_0 = 4*y*z*(x - 1)*(z - 1);} break;
	case 16: {result_0 = 4*x*z*(x - 1)*(y - 1);} break;
	case 17: {result_0 = -4*x*y*z*(y - 1);} break;
	case 18: {result_0 = -4*x*y*z*(x - 1);} break;
	case 19: {result_0 = 4*y*z*(x - 1)*(y - 1);} break;
	default: assert(false);
}}
}

void q_basis_value_3d(const int q, const int local_index, const Eigen::MatrixXd &uv, Eigen::MatrixXd &val){
switch(q){
	case 0: q_0_basis_value_3d(local_index, uv, val); break;
	case 1: q_1_basis_value_3d(local_index, uv, val); break;
	case 2: q_2_basis_value_3d(local_index, uv, val); break;
	case 3: q_3_basis_value_3d(local_index, uv, val); break;
	case -2: q_m2_basis_value_3d(local_index, uv, val); break;
	default: assert(false);
}}
}}
