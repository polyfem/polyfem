// This file is automatically generated by tools/assembler_macros.ipynb
#pragma once

#define POLYFEM_DECLARE_VIRTUAL_ELASTIC_ENERGY \
	virtual double elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<double> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 6, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 6, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 8, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 8, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 12, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 12, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 18, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 18, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 24, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 24, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 30, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 30, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 60, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 60, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, 81, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 81, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>>> &def_grad) const = 0; \
	virtual DScalar1<double, Eigen::VectorXd> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::VectorXd>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>>> &def_grad) const = 0; \
	virtual DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd>> &def_grad) const = 0;

#define POLYFEM_OVERRIDE_ELASTIC_ENERGY \
	double elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<double> &def_grad) const override { return elastic_energy_T<double>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 6, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 6, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 6, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 8, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 8, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 8, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 12, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 12, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 12, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 18, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 18, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 18, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 24, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 24, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 24, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 30, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 30, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 30, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 60, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 60, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 60, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, 81, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 81, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 81, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>>>(p, el_id, def_grad); } \
	DScalar1<double, Eigen::VectorXd> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::VectorXd>> &def_grad) const override { return elastic_energy_T<DScalar1<double, Eigen::VectorXd>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>>>(p, el_id, def_grad); } \
	DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd> elastic_energy(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd>> &def_grad) const override { return elastic_energy_T<DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd>>(p, el_id, def_grad); }

#define POLYFEM_TEMPLATE_SPECIALIZE_ELASTIC_ENERGY(NAME) \
	template double NAME::elastic_energy_T<double>(const RowVectorNd &p, const int el_id, const DefGradMatrix<double> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 6, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 6, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 6, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 8, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 8, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 8, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 12, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 12, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 12, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 18, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 18, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 18, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 24, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 24, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 24, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 30, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 30, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 30, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 60, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 60, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 60, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, 81, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, 81, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, 81, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>> NAME::elastic_energy_T<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, BIG_N, 1>>> &def_grad) const; \
	template DScalar1<double, Eigen::VectorXd> NAME::elastic_energy_T<DScalar1<double, Eigen::VectorXd>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar1<double, Eigen::VectorXd>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 6, 1>, Eigen::Matrix<double, 6, 6>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 8, 1>, Eigen::Matrix<double, 8, 8>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 12, 1>, Eigen::Matrix<double, 12, 12>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 18, 1>, Eigen::Matrix<double, 18, 18>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 24, 1>, Eigen::Matrix<double, 24, 24>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 30, 1>, Eigen::Matrix<double, 30, 30>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 60, 1>, Eigen::Matrix<double, 60, 60>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, 81, 1>, Eigen::Matrix<double, 81, 81>>> &def_grad) const; \
	template DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>> NAME::elastic_energy_T<DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::Matrix<double, Eigen::Dynamic, 1, 0, SMALL_N, 1>, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, 0, SMALL_N, SMALL_N>>> &def_grad) const; \
	template DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd> NAME::elastic_energy_T<DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd>>(const RowVectorNd &p, const int el_id, const DefGradMatrix<DScalar2<double, Eigen::VectorXd, Eigen::MatrixXd>> &def_grad) const;

namespace polyfem
{
	template <typename T>
	using DefGradMatrix = Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic, 0, 3, 3>;
}
