#pragma once

#include <polyfem/Common.hpp>

#include <polyfem/ElementAssemblyValues.hpp>
#include <polyfem/ElementBases.hpp>
#include <polyfem/ElasticityUtils.hpp>

#include <polyfem/AutodiffTypes.hpp>

#include <Eigen/Dense>
#include <functional>

//local assembler for linear elasticity
namespace polyfem
{
	class LinearElasticity
	{
	public:
		///computes local stiffness matrix is R^{dimÂ²} for bases i,j
		//vals stores the evaluation for that element
		//da contains both the quadrature weight and the change of metric in the integral
		Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 9, 1>
		assemble(const ElementAssemblyValues &vals, const int i, const int j, const QuadratureVector &da) const;

		//neccessary for mixing linear model with non-linear collision response
		Eigen::MatrixXd assemble_hessian(const ElementAssemblyValues &vals, const Eigen::MatrixXd &displacement, const QuadratureVector &da) const;
		//compute gradient of elastic energy, as assembler
		Eigen::VectorXd assemble_grad(const ElementAssemblyValues &vals, const Eigen::MatrixXd &displacement, const QuadratureVector &da) const;
		//compute elastic energy
		double compute_energy(const ElementAssemblyValues &vals, const Eigen::MatrixXd &displacement, const QuadratureVector &da) const;

		//uses autodiff to compute the rhs for a fabbricated solution
		//uses autogenerated code to compute div(sigma)
		//pt is the evaluation of the solution at a point
		Eigen::Matrix<double, Eigen::Dynamic, 1, 0, 3, 1>
		compute_rhs(const AutodiffHessianPt &pt) const;

		//compute von mises stress for an element at the local points
		void compute_von_mises_stresses(const int el_id, const ElementBases &bs, const ElementBases &gbs, const Eigen::MatrixXd &local_pts, const Eigen::MatrixXd &displacement, Eigen::MatrixXd &stresses) const;
		//compute stress tensor for an element at the local points
		void compute_stress_tensor(const int el_id, const ElementBases &bs, const ElementBases &gbs, const Eigen::MatrixXd &local_pts, const Eigen::MatrixXd &displacement, Eigen::MatrixXd &tensor) const;

		//size of the problem, this is a tensor problem so the size is the size of the mesh
		inline int &size() { return size_; }
		inline int size() const { return size_; }

		//inialize material parameter
		void set_parameters(const json &params);
		//initialize material param per element
		void init_multimaterial(const Eigen::MatrixXd &Es, const Eigen::MatrixXd &nus);

		//class that stores and compute lame parameters per point
		const LameParameters &lame_params() const { return params_; }

	private:
		int size_ = 2;
		//class that stores and compute lame parameters per point
		LameParameters params_;

		void assign_stress_tensor(const int el_id, const ElementBases &bs, const ElementBases &gbs, const Eigen::MatrixXd &local_pts, const Eigen::MatrixXd &displacement, const int all_size, Eigen::MatrixXd &all, const std::function<Eigen::MatrixXd(const Eigen::MatrixXd &)> &fun) const;

		//aux function that computes energy
		//double compute_energy is the same with T=double
		//assemble_grad is the same with T=DScalar1 and return .getGradient()
		template <typename T>
		T compute_energy_aux(const ElementAssemblyValues &vals, const Eigen::MatrixXd &displacement, const QuadratureVector &da) const;
	};
} // namespace polyfem
