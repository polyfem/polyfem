name: Build

on: [push]

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  ####################
  # Linux
  ####################

  Linux:
    name: ${{ matrix.name }} (${{ matrix.config }}, ${{ matrix.threading }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        config: [Debug, Release]
        threading: [CPP, TBB, NONE]
        include:
          - os: ubuntu-latest
            name: Linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies
        run: |
          sudo apt-get update
          sudo apt-get -o Acquire::Retries=3 install \
          libblas-dev \
          libboost-filesystem-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libglu1-mesa-dev \
          libsuitesparse-dev \
          xorg-dev \
          ccache
          echo 'CACHE_PATH=~/.ccache' >> "$GITHUB_ENV"

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.threading }}-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.threading }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=1.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DPOLYFEM_WITH_MISC=ON \
            -DPOLYFEM_WITH_CLIPPER=OFF \
            -DPOLYFEM_THREADING=${{ matrix.threading }}

      - name: Build
        run: cd build; make -j2; ccache --show-stats

      - name: Tests
        run: cd build; ctest --verbose --output-on-failure

      - name: Runner
        run: |
          cd build
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --sform Laplacian
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --sform Helmholtz
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform HookeLinearElasticity
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform LinearElasticity
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform NeoHookean
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform SaintVenant
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem DrivenCavity --tform Stokes
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem DrivenCavity --tform NavierStokes
          ./PolyFEM_bin --json ../3rdparty/data/contact/examples/3D/unit-tests/5-cubes-fast.json --cmd
          ./PolyFEM_bin --febio ../3rdparty/data/lin-neo.feb --cmd

  ####################
  # MacOS
  ####################

  MacOS:
    name: ${{ matrix.name }}-${{ matrix.arc }} (${{ matrix.config }}, ${{ matrix.threading }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        arc: [x86, arm64]
        config: [Debug, Release]
        threading: [CPP, TBB, NONE]
        include:
          - os: macos-latest
            name: macOS

    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10

      - name: Dependencies
        run: |
          brew install ccache
          echo 'CACHE_PATH=~/Library/Caches/ccache' >> "$GITHUB_ENV"

      - name: Cache Build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.threading }}-${{ matrix.arc }}-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.threading }}-${{ matrix.arc }}-cache

      - name: Prepare ccache
        run: |
          ccache --max-size=1.0G
          ccache -V && ccache --show-stats && ccache --zero-stats

      - name: Configure x86
        if: matrix.arc == 'x86'
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DPOLYFEM_WITH_MISC=ON \
            -DPOLYFEM_WITH_CLIPPER=OFF \
            -DPOLYFEM_THREADING=${{ matrix.threading }}

      - name: Configure arm64
        if: matrix.arc == 'arm64'
        run: |
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DCMAKE_OSX_ARCHITECTURES=arm64 \
            -DPOLYFEM_WITH_MISC=ON \
            -DPOLYFEM_WITH_CLIPPER=OFF \
            -DPOLYFEM_THREADING=${{ matrix.threading }}

      - name: Build
        run: cd build; make -j2; ccache --show-stats

      - name: Tests
        if: matrix.arc == 'x86' # no ARM vm on actions yet
        run: cd build; ctest --verbose --output-on-failure

      - name: Runner
        if: matrix.arc == 'x86' # no ARM vm on actions yet
        run: |
          cd build
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --sform Laplacian
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --sform Helmholtz
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform HookeLinearElasticity
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform LinearElasticity
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform NeoHookean
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem ElasticExact --tform SaintVenant
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem DrivenCavity --tform Stokes
          ./PolyFEM_bin --mesh ../3rdparty/data/contact/meshes/3D/simple/cube.msh --cmd --n_refs 1 --problem DrivenCavity --tform NavierStokes
          ./PolyFEM_bin --json ../3rdparty/data/contact/examples/3D/unit-tests/5-cubes-fast.json --cmd
          ./PolyFEM_bin --febio ../3rdparty/data/lin-neo.feb --cmd

  ####################
  # Windows
  ####################

  Windows:
    runs-on: windows-2019
    env:
      CC: cl.exe
      CXX: cl.exe
      SCCACHE_IDLE_TIMEOUT: "12000"
    strategy:
      fail-fast: false
      matrix:
        config: [Debug]
        threading: [TBB, NONE]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
        with:
          fetch-depth: 10
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Set env
        run: |
          echo "BOOST_ROOT=$env:BOOST_ROOT_1_72_0" >> ${env:GITHUB_ENV}
          echo "appdata=$env:LOCALAPPDATA" >> ${env:GITHUB_ENV}

      - name: Cache build
        id: cache-build
        uses: actions/cache@v2
        with:
          path: ${{ env.appdata }}\Mozilla\sccache
          key: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.threading }}-cache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-${{ matrix.config }}-${{ matrix.threading }}-cache

      - name: Prepare sccache
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install sccache --global
          # Scoop modifies the PATH so we make it available for the next steps of the job
          echo "${env:PATH}" >> ${env:GITHUB_PATH}

      - name: Configure and build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          cmake --version
          cmake -G Ninja ^
            -DCMAKE_CXX_COMPILER_LAUNCHER=sccache ^
            -DCMAKE_BUILD_TYPE=${{ matrix.config }} ^
            -DPOLYFEM_WITH_MISC=ON ^
            -DPOLYFEM_WITH_CLIPPER=OFF ^
            -DPOLYFEM_THREADING=${{ matrix.threading }} ^
            -B build ^
            -S .
          cd build
          ninja -j1

      - name: Tests
        run: |
          cd build
          ctest --verbose --output-on-failure

      - name: Runner
        run: |
          cd build
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --sform Laplacian
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --sform Helmholtz
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --problem ElasticExact --tform HookeLinearElasticity
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --problem ElasticExact --tform LinearElasticity
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --problem ElasticExact --tform NeoHookean
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --problem ElasticExact --tform SaintVenant
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --problem DrivenCavity --tform Stokes
          .\PolyFEM_bin.exe --mesh ..\3rdparty\data\contact\meshes\3D\simple\cube.msh --cmd --n_refs 1 --problem DrivenCavity --tform NavierStokes
          # .\PolyFEM_bin.exe --json ..\3rdparty\data\contact\examples\3D\unit-tests\5-cubes-fast.json --cmd
          .\PolyFEM_bin.exe --febio ..\3rdparty\data\lin-neo.feb --cmd
